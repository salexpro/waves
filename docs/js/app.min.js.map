{"version":3,"sources":["../../node_modules/svg4everybody/dist/svg4everybody.js","../../src/js/app.js"],"names":["root","factory","this","embed","parent","svg","target","fragment","document","createDocumentFragment","viewBox","hasAttribute","getAttribute","setAttribute","clone","cloneNode","childNodes","length","appendChild","firstChild","loadreadystatechange","xhr","onreadystatechange","readyState","cachedDocument","_cachedDocument","implementation","createHTMLDocument","body","innerHTML","responseText","_cachedTarget","_embeds","splice","map","item","id","getElementById","svg4everybody","rawopts","oninterval","index","uses","use","parentNode","getSVGAncestor","src","opts","attributeName","polyfill","validate","removeChild","srcSplit","split","url","shift","join","requests","XMLHttpRequest","open","send","push","numberOfSvgUseElementsToBypass","requestAnimationFrame","Object","newerIEUA","webkitUA","olderEdgeUA","edgeUA","inIframe","window","top","self","test","navigator","userAgent","match","setTimeout","getElementsByTagName","node","nodeName","toLowerCase","module","exports"],"mappings":"2PAAC,IAASA,EAAMC,EAAND,EAQRE,EARcD,EAQR,oBAEKE,EAAMC,EAAQC,EAAKC,MAEpBA,EAAQ,KAEJC,EAAWC,SAASC,yBAA0BC,GAAWL,EAAIM,aAAa,YAAcL,EAAOM,aAAa,WAEhHF,GAAWL,EAAIQ,aAAa,UAAWH,WAGnCI,EAAQR,EAAOS,WAAU,GAAKD,EAAME,WAAWC,QAC/CV,EAASW,YAAYJ,EAAMK,YAG/Bf,EAAOc,YAAYX,aAGlBa,EAAqBC,GAE1BA,EAAIC,mBAAqB,cAEjB,IAAMD,EAAIE,WAAY,KAElBC,EAAiBH,EAAII,gBAEzBD,KAAmBA,EAAiBH,EAAII,gBAAkBjB,SAASkB,eAAeC,mBAAmB,KACtFC,KAAKC,UAAYR,EAAIS,aAAcT,EAAIU,cAAgB,IACtEV,EAAIW,QAAQC,OAAO,GAAGC,IAAI,SAASC,OAE3B7B,EAASe,EAAIU,cAAcI,EAAKC,IAEpC9B,IAAWA,EAASe,EAAIU,cAAcI,EAAKC,IAAMZ,EAAea,eAAeF,EAAKC,KAEpFjC,EAAMgC,EAAK/B,OAAQ+B,EAAK9B,IAAKC,OAIzCe,EAAIC,8BAECgB,EAAcC,YACVC,YAGDC,EAAQ,EAAGA,EAAQC,EAAKzB,QAAU,KAE9B0B,EAAMD,EAAKD,GAAQrC,EAASuC,EAAIC,WAAYvC,EAAMwC,EAAezC,GAAS0C,EAAMH,EAAI/B,aAAa,eAAiB+B,EAAI/B,aAAa,YAClIkC,GAAOC,EAAKC,gBAAkBF,EAAMH,EAAI/B,aAAamC,EAAKC,gBAC/D3C,GAAOyC,MACCG,MACKF,EAAKG,UAAYH,EAAKG,SAASJ,EAAKzC,EAAKsC,GAAM,CAEhDvC,EAAO+C,YAAYR,OAEfS,EAAWN,EAAIO,MAAM,KAAMC,EAAMF,EAASG,QAASnB,EAAKgB,EAASI,KAAK,QAEtEF,EAAIrC,OAAQ,KAERI,EAAMoC,EAASH,GAEnBjC,KAAQA,EAAMoC,EAASH,GAAO,IAAII,gBAAsBC,KAAK,MAAOL,GAAMjC,EAAIuC,OAC9EvC,EAAIW,QAAU,IACdX,EAAIW,QAAQ6B,KAAK,CACbzD,OAAQA,EACRC,IAAKA,EACL+B,GAAIA,IAERhB,EAAqBC,QAGrBlB,EAAMC,EAAQC,EAAKG,SAAS6B,eAAeD,UAI7CK,IAASqB,QAKjBrB,IAIRC,EAAKzB,QAAUyB,EAAKzB,OAAS6C,EAAiC,IAAMC,EAAsBvB,EAAY,QAExGS,EAAUF,EAAOiB,OAAOzB,GAAU0B,EAAY,0CAA2CC,EAAW,yBAA0BC,EAAc,sBAAuBC,EAAS,mBAAoBC,EAAWC,OAAOC,MAAQD,OAAOE,KACrOvB,EAAW,aAAcF,EAAOA,EAAKE,SAAWgB,EAAUQ,KAAKC,UAAUC,aAAeD,UAAUC,UAAUC,MAAMT,IAAgB,IAAI,GAAK,QAAUO,UAAUC,UAAUC,MAAMV,IAAa,IAAI,GAAK,KAAOE,EAAOK,KAAKC,UAAUC,YAAcN,MAE5OZ,EAAW,GAAIM,EAAwBO,OAAOP,uBAAyBc,WAAYnC,EAAOlC,SAASsE,qBAAqB,OAAQhB,EAAiC,EAErKb,GAAYT,aAEPK,EAAekC,OACf,IAAI1E,EAAM0E,EAAM,QAAU1E,EAAI2E,SAASC,gBAAkB5E,EAAMA,EAAIuC,qBACjEvC,SAEJiC,GApG2B4C,EAAOC,QAGzCD,EAAAA,QAAiBjF,IAAYD,EAAKsC,cAAgBrC,KCDtDqC","sourcesContent":["!function(root, factory) {\n    \"function\" == typeof define && define.amd ? // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function() {\n        return root.svg4everybody = factory();\n    }) : \"object\" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory() : root.svg4everybody = factory();\n}(this, function() {\n    /*! svg4everybody v2.1.9 | github.com/jonathantneal/svg4everybody */\n    function embed(parent, svg, target) {\n        // if the target exists\n        if (target) {\n            // create a document fragment to hold the contents of the target\n            var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute(\"viewBox\") && target.getAttribute(\"viewBox\");\n            // conditionally set the viewBox on the svg\n            viewBox && svg.setAttribute(\"viewBox\", viewBox);\n            // copy the contents of the clone into the fragment\n            for (// clone the target\n            var clone = target.cloneNode(!0); clone.childNodes.length; ) {\n                fragment.appendChild(clone.firstChild);\n            }\n            // append the fragment into the svg\n            parent.appendChild(fragment);\n        }\n    }\n    function loadreadystatechange(xhr) {\n        // listen to changes in the request\n        xhr.onreadystatechange = function() {\n            // if the request is ready\n            if (4 === xhr.readyState) {\n                // get the cached html document\n                var cachedDocument = xhr._cachedDocument;\n                // ensure the cached html document based on the xhr response\n                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(\"\"), \n                cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item\n                xhr._embeds.splice(0).map(function(item) {\n                    // get the cached target\n                    var target = xhr._cachedTarget[item.id];\n                    // ensure the cached target\n                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)), \n                    // embed the target into the svg\n                    embed(item.parent, item.svg, target);\n                });\n            }\n        }, // test the ready state change immediately\n        xhr.onreadystatechange();\n    }\n    function svg4everybody(rawopts) {\n        function oninterval() {\n            // while the index exists in the live <use> collection\n            for (// get the cached <use> index\n            var index = 0; index < uses.length; ) {\n                // get the current <use>\n                var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent), src = use.getAttribute(\"xlink:href\") || use.getAttribute(\"href\");\n                if (!src && opts.attributeName && (src = use.getAttribute(opts.attributeName)), \n                svg && src) {\n                    if (polyfill) {\n                        if (!opts.validate || opts.validate(src, svg, use)) {\n                            // remove the <use> element\n                            parent.removeChild(use);\n                            // parse the src and get the url and id\n                            var srcSplit = src.split(\"#\"), url = srcSplit.shift(), id = srcSplit.join(\"#\");\n                            // if the link is external\n                            if (url.length) {\n                                // get the cached xhr request\n                                var xhr = requests[url];\n                                // ensure the xhr request exists\n                                xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open(\"GET\", url), xhr.send(), \n                                xhr._embeds = []), // add the svg and id as an item to the xhr embeds list\n                                xhr._embeds.push({\n                                    parent: parent,\n                                    svg: svg,\n                                    id: id\n                                }), // prepare the xhr ready state change event\n                                loadreadystatechange(xhr);\n                            } else {\n                                // embed the local id into the svg\n                                embed(parent, svg, document.getElementById(id));\n                            }\n                        } else {\n                            // increase the index when the previous value was not \"valid\"\n                            ++index, ++numberOfSvgUseElementsToBypass;\n                        }\n                    }\n                } else {\n                    // increase the index when the previous value was not \"valid\"\n                    ++index;\n                }\n            }\n            // continue the interval\n            (!uses.length || uses.length - numberOfSvgUseElementsToBypass > 0) && requestAnimationFrame(oninterval, 67);\n        }\n        var polyfill, opts = Object(rawopts), newerIEUA = /\\bTrident\\/[567]\\b|\\bMSIE (?:9|10)\\.0\\b/, webkitUA = /\\bAppleWebKit\\/(\\d+)\\b/, olderEdgeUA = /\\bEdge\\/12\\.(\\d+)\\b/, edgeUA = /\\bEdge\\/.(\\d+)\\b/, inIframe = window.top !== window.self;\n        polyfill = \"polyfill\" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;\n        // create xhr requests object\n        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName(\"use\"), numberOfSvgUseElementsToBypass = 0;\n        // conditionally start the interval if the polyfill is active\n        polyfill && oninterval();\n    }\n    function getSVGAncestor(node) {\n        for (var svg = node; \"svg\" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode); ) {}\n        return svg;\n    }\n    return svg4everybody;\n});","// eslint-disable-next-line no-unused-vars\n// import polyfill from '@babel/polyfill';\n\nimport svg4everybody from 'svg4everybody';\n// import './lib/foundation-explicit-pieces';\n\nsvg4everybody();"]}